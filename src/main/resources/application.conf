app {
  
  # The Akka actor system will bind to this host and poort
  # The default can be overwritten using the APP_HOST and APP_PORT env variables
  # Note: Default host is `InetAddress.getLocalHost.getHostAddress`
  #host = "127.0.0.1"
  host = ${?APP_HOST}
  port = 0
  port = ${?APP_PORT}

  server_host = ${?SERVER_HOST}
  server_port = 2550
  server_port = ${?SERVER_PORT}

  # A seeds file can optionally be specified using the APP_SEEDS_FILE env variable
  # cluster.seedsFile = ${?APP_SEEDS_FILE}
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logger-startup-timeout = 10s
  logLevel = "DEBUG"
  log-dead-letters = 10
  log-dead-letters-during-shutdown = off
  log-config-on-start = off

  actor {
    provider = "akka.remote.RemoteActorRefProvider"
    serialize-messages = on    
    serializers {
      java = "akka.serialization.JavaSerializer" 
      cfabcaster = "cfabcast.serialization.CFABCastSerializer"
    }
    serialization-bindings {
      "cfabcast.messages.CFABCastMessage" = cfabcaster
    }

    debug {
      autoreceive = on
      lifecycle = on
      event-stream = on
    }
  }
  
  remote {
    transport = "akka.remote.netty.NettyRemoteTransport"
    log-sent-messages = on
    log-received-messages = on
    log-remote-lifecycle-events = on
    netty.tcp {
      hostname = ${?app.host}
      port = ${?app.port}
    }
 
    ### Failure detection and recovery
    # Settings for the failure detector to monitor connections.
    # For TCP it is not important to have fast failure detection, since
    # most connection failures are captured by TCP itself. 
    # The default DeadlineFailureDetector will trigger if there are no heartbeats within
    # the duration heartbeat-interval + acceptable-heartbeat-pause, i.e. 20 seconds
    # with the default settings.
    transport-failure-detector {
    
      # FQCN of the failure detector implementation.
      # It must implement akka.remote.FailureDetector and have
      # a public constructor with a com.typesafe.config.Config and
      # akka.actor.EventStream parameter.
      implementation-class = "akka.remote.DeadlineFailureDetector"
 
      # How often keep-alive heartbeat messages should be sent to each connection.
      # default: 4 s
      heartbeat-interval = 4 s
 
      # Number of potentially lost/delayed heartbeats that will be
      # accepted before considering it to be an anomaly.
      # A margin to the `heartbeat-interval` is important to be able to survive sudden,
      # occasional, pauses in heartbeat arrivals, due to for example garbage collect or
      # network drop.
      # default: 16 s
      acceptable-heartbeat-pause = 16 s
    }
 
    # Settings for the Phi accrual failure detector (http://ddg.jaist.ac.jp/pub/HDY+04.pdf
    # [Hayashibara et al]) used for remote death watch.
    # The default PhiAccrualFailureDetector will trigger if there are no heartbeats within
    # the duration heartbeat-interval + acceptable-heartbeat-pause + threshold_adjustment,
    # i.e. around 12.5 seconds with default settings.
    watch-failure-detector {
 
      # FQCN of the failure detector implementation.
      # It must implement akka.remote.FailureDetector and have
      # a public constructor with a com.typesafe.config.Config and
      # akka.actor.EventStream parameter.
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
 
      # How often keep-alive heartbeat messages should be sent to each connection.
      # default: 1 s
      heartbeat-interval = 1 s
 
      # Defines the failure detector threshold.
      # A low threshold is prone to generate many wrong suspicions but ensures
      # a quick detection in the event of a real crash. Conversely, a high
      # threshold generates fewer mistakes but needs more time to detect
      # actual crashes.
      # default: 10.0
      threshold = 10.0
 
      # Number of the samples of inter-heartbeat arrival times to adaptively
      # calculate the failure timeout for connections.
      # default: 200
      max-sample-size = 200
 
      # Minimum standard deviation to use for the normal distribution in
      # AccrualFailureDetector. Too low standard deviation might result in
      # too much sensitivity for sudden, but normal, deviations in heartbeat
      # inter arrival times.
      # default: 100 ms
      min-std-deviation = 100 ms
 
      # Number of potentially lost/delayed heartbeats that will be
      # accepted before considering it to be an anomaly.
      # This margin is important to be able to survive sudden, occasional,
      # pauses in heartbeat arrivals, due to for example garbage collect or
      # network drop.
      # default: 10 s
      acceptable-heartbeat-pause = 10 s
 
 
      # How often to check for nodes marked as unreachable by the failure
      # detector
      # default: 1 s
      unreachable-nodes-reaper-interval = 1 s
 
      # After the heartbeat request has been sent the first failure detection
      # will start after this period, even though no heartbeat mesage has
      # been received.
      # default: 1 s
      expected-response-after = 1 s
    }
  }
}

# Cluster nodes that play Proposers role
contact-points = [
  "akka.tcp://CFABCastSystem@node42:2551",
  "akka.tcp://CFABCastSystem@node43:2552",
  "akka.tcp://CFABCastSystem@node44:2553"
]
#contact-points = [
#  "akka.tcp://CFABCastSystem@127.0.0.1:2551",
#  "akka.tcp://CFABCastSystem@127.0.0.1:2552",
#  "akka.tcp://CFABCastSystem@127.0.0.1:2553"
#]
